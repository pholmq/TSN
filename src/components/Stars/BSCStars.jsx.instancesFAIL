import { useRef, useMemo, useState, useEffect } from "react";
import { useThree, useFrame } from "@react-three/fiber";
import * as THREE from "three";
import { Vector3, Quaternion } from "three";
import { Bvh, Instances, Instance } from "@react-three/drei";
import { usePlotStore } from "../../store";
import bscSettings from "../../settings/BSC.json";
import { dateTimeToPos } from "../../utils/time-date-functions";
import { useStore } from "../../store";
import {
  declinationToRadians,
  rightAscensionToRadians,
  sphericalToCartesian,
} from "../../utils/celestial-functions";
import colorTemperature2rgb from "../../utils/colorTempToRGB";
// import createCircleTexture from "../../utils/createCircleTexture";

function moveModel(plotObjects, plotPos) {
  plotObjects.forEach((pObj) => {
    pObj.orbitRef.current.rotation.y =
      pObj.speed * plotPos - pObj.startPos * (Math.PI / 180);
  });
}

function createCircleTexture() {
  const size = 256;
  const canvas = document.createElement("canvas");
  canvas.width = size;
  canvas.height = size;
  const context = canvas.getContext("2d");
  context.beginPath();
  context.arc(size / 2, size / 2, size / 2 - 2, 0, Math.PI * 2);
  context.fillStyle = "white";
  context.fill();
  const texture = new THREE.Texture(canvas);
  texture.needsUpdate = true;
  return texture;
}

const BSCStars = () => {
  const starGroupRef = useRef();
  const plotObjects = usePlotStore((s) => s.plotObjects);

  const officialStarDistances = useStore((s) => s.officialStarDistances);
  const starDistanceModifier = useStore((s) => s.starDistanceModifier);
  const starScale = useStore((s) => s.starScale);

  // Create circular texture
  // const circleTexture = useMemo(() => createCircleTexture(), []);

  // Move the starGroupRef into position Epoch J2000
  useEffect(() => {
    if (plotObjects.length > 0 && starGroupRef.current) {
      const epochJ2000Pos = dateTimeToPos("2000-01-01", "12:00:00");
      const worldPosition = new Vector3();
      const worldQuaternion = new Quaternion();
      //We move the plot model to Epoch J2000 and copy Earths position and tilt
      moveModel(plotObjects, epochJ2000Pos);
      const earthObj = plotObjects.find((p) => p.name === "Earth");
      earthObj.cSphereRef.current.getWorldPosition(worldPosition);
      earthObj.cSphereRef.current.getWorldQuaternion(worldQuaternion);
      //And then we set the starGroup to this so that RA and Dec will be correct
      starGroupRef.current.position.copy(worldPosition);
      starGroupRef.current.quaternion.copy(worldQuaternion);
    }
  }, [plotObjects]);

  // Memoize star attributes directly from BSC.json
  const { data } = useMemo(() => {
    const data = [];

    // Iterate over BSC.json
    bscSettings.forEach((s, index) => {
      // Parse string fields to numbers
      const magnitude = parseFloat(s.V);
      const colorTemp = parseFloat(s.K) || 5778;

      const raRad = rightAscensionToRadians(s.RA); // RA in hours to radians
      const decRad = declinationToRadians(s.Dec); // Dec in degrees to radians

      const distLy = parseFloat(s.P) * 3.26156378; // Parsecs to light-years
      let dist;
      if (!officialStarDistances) {
        dist = 2000;
      } else {
        //Convert light year distance to world units (1Ly = 63241 AU, 1 AU = 100 world units)
        const worldDist = distLy * 63241 * 100;
        dist =
          worldDist / (starDistanceModifier >= 1 ? starDistanceModifier : 1); // Distance
      }

      // Convert spherical coordinates (RA, Dec, Dist) to Cartesian coordinates (x, y, z)
      const { x, y, z } = sphericalToCartesian(raRad, decRad, dist);
      // Set the position of the star
      // console.log(x, y, z);
      const position = new THREE.Vector3(x, y, z);

      const color = new THREE.Color(colorTemperature2rgb(colorTemp));

      // Size based on magnitude
      let starsize;
      if (magnitude < 1) {
        starsize = 1.2;
      } else if (magnitude > 1 && magnitude < 3) {
        starsize = 0.6;
      } else if (magnitude > 3 && magnitude < 5) {
        starsize = 0.4;
      } else {
        starsize = 0.2;
      }

      const size = starsize * starScale * 10;

      // Store metadata for mouseover
      const starData = {
        name: s.N ? s.N : "HR " + s.HR,
        magnitude: isNaN(magnitude) ? 5 : magnitude,
        colorTemp,
        ra: s.RA,
        dec: s.Dec,
        distLy,
      };

      data.push({ position, color, size, starData });
    });

    return {
      data,
    };
  }, [officialStarDistances, starDistanceModifier, starScale]); // Update if these changes

  return (
    <group ref={starGroupRef}>
      <axesHelper args={[1000]} />
      {/* <Bvh firstHitOnly> */}
      <Stars data={data} />
      {/* </Bvh> */}
    </group>
  );
};

function Stars({ data }) {
  const sphereGeometry = new THREE.SphereGeometry(1);
  const material = new THREE.MeshBasicMaterial({ color: "white" });
  return (
    <Instances geometry={sphereGeometry} material={material}>
      {data.map((props, i) => (
        <Star key={i} {...props} />
      ))}
    </Instances>
  );
}

function Star({ position, color, size, starData }) {
  const ref = useRef();
  // console.log(position, color, size);
  return <Instance ref={ref} position={position} scale={size} color={color} />;
}

export default BSCStars;
